"""change slots and add working hours

Revision ID: 3111b176081c
Revises: f8318189ccce
Create Date: 2023-09-30 14:57:37.482302

"""
import random
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3111b176081c"
down_revision: Union[str, None] = "f8318189ccce"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
working_hours_variants = [
    {"start_time": 8, "end_time": 17},
    {"start_time": 9, "end_time": 18},
    {"start_time": 10, "end_time": 19},
    {"start_time": 11, "end_time": 20},
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workinghours",
        sa.Column("working_hour_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.Integer(), nullable=False),
        sa.Column("end_time", sa.Integer(), nullable=False),
        sa.Column("weekday_index", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.location_id"],
        ),
        sa.PrimaryKeyConstraint("working_hour_id"),
    )
    op.drop_column("diagnostic_slots", "is_booked")
    op.drop_column("doctor_slots", "is_booked")
    op.drop_column("doctors", "working_time")
    op.add_column("slots", sa.Column("date", sa.Date(), nullable=False))
    op.add_column(
        "slots",
        sa.Column(
            "is_booked", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
    )
    op.drop_column("slots", "end_time")

    # Get the list of existing location IDs
    conn = op.get_bind()
    result = conn.scalars(sa.text("SELECT location_id FROM locations;"))
    # Insert working hours for each location
    for location_id in result:
        for weekday_index in range(6):  # 0=Monday, 1=Tuesday, ..., 6=Sunday, Sunday is not working day
            # Randomly select working hours variant
            working_hours = random.choice(working_hours_variants)

            conn.execute(
                sa.text(
                    """
                    INSERT INTO workinghours (location_id, start_time, end_time, weekday_index)
                    VALUES (:location_id, :start_time, :end_time, :weekday_index);
                """
                ),
                parameters=dict(
                    location_id=location_id,
                    start_time=working_hours["start_time"],
                    end_time=working_hours["end_time"],
                    weekday_index=weekday_index,
                ),
            )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "slots",
        sa.Column(
            "end_time", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
    )
    op.drop_column("slots", "is_booked")
    op.drop_column("slots", "date")
    op.add_column(
        "doctors",
        sa.Column("working_time", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "doctor_slots",
        sa.Column(
            "is_booked",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "diagnostic_slots",
        sa.Column(
            "is_booked",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_table("workinghours")
    # ### end Alembic commands ###
