"""init database

Revision ID: c3601dc5d69d
Revises: 
Create Date: 2023-09-29 07:03:04.201178

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c3601dc5d69d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "diagnostics",
        sa.Column("diagnostic_id", sa.Integer(), nullable=False),
        sa.Column("type_name", sa.String(length=128), nullable=False),
        sa.Column("description", sa.String(length=256), nullable=False),
        sa.Column("price", sa.DECIMAL(precision=10, scale=2), nullable=False),
        sa.PrimaryKeyConstraint("diagnostic_id"),
    )
    op.create_table(
        "locations",
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("address", sa.String(length=256), nullable=False),
        sa.PrimaryKeyConstraint("location_id"),
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("username", sa.String(length=128), nullable=True),
        sa.Column("full_name", sa.String(length=128), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "diagnostic_locations",
        sa.Column("diagnostic_location_id", sa.Integer(), nullable=False),
        sa.Column("diagnostic_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["diagnostic_id"],
            ["diagnostics.diagnostic_id"],
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.location_id"],
        ),
        sa.PrimaryKeyConstraint("diagnostic_location_id"),
    )
    op.create_table(
        "doctors",
        sa.Column("doctor_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("full_name", sa.String(length=128), nullable=False),
        sa.Column("specialty", sa.String(length=128), nullable=False),
        sa.Column("price", sa.DECIMAL(precision=10, scale=2), nullable=False),
        sa.Column("photo_url", sa.String(length=256), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.location_id"],
        ),
        sa.PrimaryKeyConstraint("doctor_id"),
    )
    op.create_table(
        "slots",
        sa.Column("slot_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.TIMESTAMP(), nullable=False),
        sa.Column("end_time", sa.TIMESTAMP(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.location_id"],
        ),
        sa.PrimaryKeyConstraint("slot_id"),
    )
    op.create_table(
        "diagnostic_slots",
        sa.Column("diagnostic_slot_id", sa.Integer(), nullable=False),
        sa.Column("diagnostic_location_id", sa.Integer(), nullable=False),
        sa.Column("slot_id", sa.Integer(), nullable=False),
        sa.Column(
            "is_booked", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["diagnostic_location_id"],
            ["diagnostic_locations.diagnostic_location_id"],
        ),
        sa.ForeignKeyConstraint(
            ["slot_id"],
            ["slots.slot_id"],
        ),
        sa.PrimaryKeyConstraint("diagnostic_slot_id"),
    )
    op.create_table(
        "doctor_bookings",
        sa.Column("appointment_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column("doctor_id", sa.Integer(), nullable=False),
        sa.Column("slot_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("Booked", "Cancelled", name="booking_status"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["doctor_id"],
            ["doctors.doctor_id"],
        ),
        sa.ForeignKeyConstraint(
            ["slot_id"],
            ["slots.slot_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("appointment_id"),
    )
    op.create_table(
        "doctor_ratings",
        sa.Column("rating_id", sa.Integer(), nullable=False),
        sa.Column("doctor_id", sa.Integer(), nullable=False),
        sa.Column("rating", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["doctor_id"],
            ["doctors.doctor_id"],
        ),
        sa.PrimaryKeyConstraint("rating_id"),
    )
    op.create_table(
        "doctor_slots",
        sa.Column("doctor_slot_id", sa.Integer(), nullable=False),
        sa.Column("doctor_id", sa.Integer(), nullable=False),
        sa.Column("slot_id", sa.Integer(), nullable=False),
        sa.Column(
            "is_booked", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["doctor_id"],
            ["doctors.doctor_id"],
        ),
        sa.ForeignKeyConstraint(
            ["slot_id"],
            ["slots.slot_id"],
        ),
        sa.PrimaryKeyConstraint("doctor_slot_id"),
    )
    op.create_table(
        "bookings",
        sa.Column("booking_id", sa.Integer(), nullable=False),
        sa.Column("user_full_name", sa.String(length=256), nullable=False),
        sa.Column("user_email", sa.String(length=256), nullable=False),
        sa.Column("user_phone_number", sa.String(length=16), nullable=False),
        sa.Column("doctor_slot_id", sa.Integer(), nullable=True),
        sa.Column("diagnostic_slot_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["diagnostic_slot_id"],
            ["diagnostic_slots.diagnostic_slot_id"],
        ),
        sa.ForeignKeyConstraint(
            ["doctor_slot_id"],
            ["doctor_slots.doctor_slot_id"],
        ),
        sa.PrimaryKeyConstraint("booking_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # delete enum:
    op.execute("DROP TYPE booking_status")
    op.drop_table("bookings")
    op.drop_table("doctor_slots")
    op.drop_table("doctor_ratings")
    op.drop_table("doctor_bookings")
    op.drop_table("diagnostic_slots")
    op.drop_table("slots")
    op.drop_table("doctors")
    op.drop_table("diagnostic_locations")
    op.drop_table("users")
    op.drop_table("locations")
    op.drop_table("diagnostics")
    # ### end Alembic commands ###
